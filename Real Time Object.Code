import cv2
import torch
import numpy as np
import pandas as pd
from ultralytics import YOLO
from deep_sort_realtime.deepsort_tracker import DeepSort
import time

# Load YOLOv5 model (You can replace 'yolov5s' with 'yolov5m', 'yolov5l', etc.)
model = YOLO("yolov5s.pt")

# Initialize DeepSORT tracker
tracker = DeepSort(max_age=30)

# Open video f
 #eed (0 for webcam, or provide a video file path)
video_path = 0 # Replace with "your_video.mp4" if using a file
cap = cv2.VideoCapture(video_path)

# Define output video writer
fourcc = cv2.VideoWriter_fourcc(*"XVID")
out = cv2.VideoWriter("output.avi", fourcc, 20.0, (int(cap.get(3)), int(cap.get(4))))

# Log file for detected events
log_file = "surveillance_log.csv"
log_columns = ["Timestamp", "Object", "Confidence", "X", "Y", "Width", "Height"]
log_data = []

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Run YOLO detection
    results = model(frame)

    detections = []
    for result in results:
        for det in result.boxes.data:
            x1, y1, x2, y2, conf, cls = det.cpu().numpy()
            class_id = int(cls)
            confidence = float(conf)
            label = model.names[class_id]

            # Print detected objects
            print(f"Detected: {label} | Confidence: {confidence:.2f} | Box: ({x1}, {y1}, {x2}, {y2})")

            # Filter out weak detections
            if confidence > 0.5:
                detections.append(([x1, y1, x2, y2], confidence, label))

    # Update tracker
    tracks = tracker.update_tracks(detections, frame=frame)

    for track in tracks:
        if not track.is_confirmed():
            continue

        track_id = track.track_id
        bbox = track.to_tlbr()
        x1, y1, x2, y2 = map(int, bbox)
        label = track.get_det_class()

        # Print tracking details
        print(f"Tracking ID: {track_id} | Object: {label} | Position: ({x1}, {y1}) -> ({x2}, {y2})")

        # Draw bounding box and label
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(frame, f"{label} {track_id}", (x1, y1 - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

        # Log detected object
        log_data.append([time.strftime("%Y-%m-%d %H:%M:%S"), label, confidence, x1, y1, x2 - x1, y2 - y1])

    # Show video
    cv2.imshow("Surveillance System", frame)
    out.write(frame)

    # Press 'q' to exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Save log to CSV
df = pd.DataFrame(log_data, columns=log_columns)
df.to_csv(log_file, index=False)

# Release resources
cap.release()
out.release()
cv2.destroyAllWindows()


